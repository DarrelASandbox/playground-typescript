{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://09_webpacks/./src/components/base-component.ts","webpack://09_webpacks/./src/decorator/autobind.ts","webpack://09_webpacks/./src/utils/validation.ts","webpack://09_webpacks/./src/models/project.ts","webpack://09_webpacks/./src/state/project-state.ts","webpack://09_webpacks/./src/components/project-input.ts","webpack://09_webpacks/./src/components/project-item.ts","webpack://09_webpacks/./src/app.ts","webpack://09_webpacks/./src/components/project-list.ts"],"sourcesContent":["export abstract class Component<T extends HTMLElement, U extends HTMLElement> {\n  templateElement: HTMLTemplateElement;\n  hostElement: T;\n  element: U;\n\n  constructor(\n    templateId: string,\n    hostElementId: string,\n    insertAtStart: boolean,\n    newElementId?: string\n  ) {\n    this.templateElement = document.getElementById(templateId)! as HTMLTemplateElement;\n    this.hostElement = document.getElementById(hostElementId)! as T;\n\n    const importedNode = document.importNode(this.templateElement.content, true);\n    this.element = importedNode.firstElementChild as U;\n    if (newElementId) this.element.id = newElementId;\n    this.attach(insertAtStart);\n  }\n\n  private attach(insertAtStart: boolean) {\n    this.hostElement.insertAdjacentElement(\n      insertAtStart ? 'afterbegin' : 'beforeend',\n      this.element\n    );\n  }\n\n  abstract configure(): void;\n  abstract renderContent(): void;\n}\n","export function autoBind(\n  target: any,\n  methodName: string,\n  descriptor: PropertyDescriptor\n) {\n  const originalMethod = descriptor.value;\n  const adjDescriptor: PropertyDescriptor = {\n    configurable: true,\n    get() {\n      const boundFn = originalMethod.bind(this);\n      return boundFn;\n    },\n  };\n  return adjDescriptor;\n}\n","export interface ValidateInput {\n  value: string | number;\n  required?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  min?: number;\n  max?: number;\n}\n\nexport function validate(validateInput: ValidateInput) {\n  let isValid = true;\n  if (validateInput.required) {\n    isValid = isValid && validateInput.value.toString().trim().length !== 0;\n  }\n  if (validateInput.minLength != null && typeof validateInput.value === 'string') {\n    isValid = isValid && validateInput.value.length >= validateInput.minLength;\n  }\n  if (validateInput.maxLength != null && typeof validateInput.value === 'string') {\n    isValid = isValid && validateInput.value.length <= validateInput.maxLength;\n  }\n  if (validateInput.min != null && typeof validateInput.value === 'number') {\n    isValid = isValid && validateInput.value >= validateInput.min;\n  }\n  if (validateInput.max != null && typeof validateInput.value === 'number') {\n    isValid = isValid && validateInput.value <= validateInput.max;\n  }\n\n  return isValid;\n}\n","// Project Type\nexport enum ProjectStatus {\n  Active,\n  Finished,\n}\n\nexport class Project {\n  constructor(\n    public id: string,\n    public title: string,\n    public description: string,\n    public people: number,\n    public status: ProjectStatus\n  ) {}\n}\n","import { Project, ProjectStatus } from '../models/project';\n\n// Project State Management\ntype Listener<T> = (items: T[]) => void;\n\nclass State<T> {\n  protected listeners: Listener<T>[] = [];\n\n  addListener(listenerFn: Listener<T>) {\n    this.listeners.push(listenerFn);\n  }\n}\n\nexport class ProjectState extends State<Project> {\n  private projects: Project[] = [];\n  private static instance: ProjectState;\n\n  private constructor() {\n    super();\n  }\n\n  static getInstance() {\n    if (this.instance) {\n      return this.instance;\n    }\n\n    this.instance = new ProjectState();\n    return this.instance;\n  }\n\n  addProject(title: string, description: string, numOfPeople: number) {\n    const newProject = new Project(\n      Math.random().toString(),\n      title,\n      description,\n      numOfPeople,\n      ProjectStatus.Active\n    );\n\n    this.projects.push(newProject);\n    this.updateListeners();\n  }\n\n  moveProject(projectId: string, newStatus: ProjectStatus) {\n    const project = this.projects.find((prj) => prj.id === projectId);\n    if (project && project.status !== newStatus) {\n      project.status = newStatus;\n      this.updateListeners();\n    }\n  }\n\n  private updateListeners() {\n    for (const listenerFn of this.listeners) {\n      listenerFn(this.projects.slice()); // Pass a copy\n    }\n  }\n}\n\nexport const projectState = ProjectState.getInstance();\n","import { Component } from './base-component';\nimport { autoBind } from '../decorator/autobind';\nimport * as Validation from '../utils/validation';\nimport { projectState } from '../state/project-state';\n\nexport class ProjectInput extends Component<HTMLDivElement, HTMLFormElement> {\n  titleInputElement: HTMLInputElement;\n  descriptionInputElement: HTMLInputElement;\n  peopleInputElement: HTMLInputElement;\n\n  constructor() {\n    super('project-input', 'app', true, 'user-input');\n    this.titleInputElement = this.element.querySelector('#title') as HTMLInputElement;\n    this.descriptionInputElement = this.element.querySelector(\n      '#description'\n    ) as HTMLInputElement;\n    this.peopleInputElement = this.element.querySelector('#people') as HTMLInputElement;\n\n    this.configure();\n  }\n\n  configure() {\n    // `bind` will refer `this` to the class\n    this.element.addEventListener('submit', this.submitHandler);\n  }\n\n  renderContent() {}\n\n  private gatherUserInput(): [string, string, number] | void {\n    const enteredTitle = this.titleInputElement.value;\n    const enteredDescription = this.descriptionInputElement.value;\n    const enteredPeople = this.peopleInputElement.value;\n\n    const titleValidate: Validation.ValidateInput = {\n      value: enteredTitle,\n      required: true,\n    };\n\n    const descriptionValidate: Validation.ValidateInput = {\n      value: enteredDescription,\n      required: true,\n      minLength: 5,\n    };\n\n    const peopleValidate: Validation.ValidateInput = {\n      value: +enteredPeople,\n      required: true,\n      min: 1,\n      max: 5,\n    };\n\n    if (\n      !Validation.validate(titleValidate) ||\n      !Validation.validate(descriptionValidate) ||\n      !Validation.validate(peopleValidate)\n    ) {\n      alert('Invalid input, please try again!');\n      return;\n    } else return [enteredTitle, enteredDescription, +enteredPeople];\n  }\n\n  private clearInputs() {\n    this.titleInputElement.value = '';\n    this.descriptionInputElement.value = '';\n    this.peopleInputElement.value = '';\n  }\n\n  @autoBind\n  private submitHandler(e: Event) {\n    e.preventDefault();\n    const userInput = this.gatherUserInput();\n    if (Array.isArray(userInput)) {\n      const [title, desc, people] = userInput;\n      projectState.addProject(title, desc, people);\n      this.clearInputs();\n    }\n  }\n}\n","import { Component } from './base-component';\nimport { autoBind } from '../decorator/autobind';\nimport { Project } from '../models/project';\nimport { Draggable } from '../models/drag-drop';\n\nexport class ProjectItem\n  extends Component<HTMLUListElement, HTMLLIElement>\n  implements Draggable\n{\n  private project: Project;\n\n  get numOfPeople() {\n    return this.project.people === 1 ? '1 person' : `${this.project.people} people`;\n  }\n\n  constructor(hostId: string, project: Project) {\n    super('single-project', hostId, false, project.id);\n    this.project = project;\n\n    this.configure();\n    this.renderContent();\n  }\n\n  @autoBind\n  dragStartHandler(event: DragEvent) {\n    event.dataTransfer!.setData('text/plain', this.project.id);\n    event.dataTransfer!.effectAllowed = 'move';\n  }\n\n  dragEndHandler(event: DragEvent) {\n    console.log('DragEnd');\n  }\n\n  configure() {\n    this.element.addEventListener('dragstart', this.dragStartHandler);\n    this.element.addEventListener('dragend', this.dragEndHandler);\n  }\n\n  renderContent() {\n    this.element.querySelector('h2')!.textContent = this.project.title;\n    this.element.querySelector('h3')!.textContent = this.numOfPeople + ' assigned';\n    this.element.querySelector('p')!.textContent = this.project.description;\n  }\n}\n","import { ProjectInput } from './components/project-input';\nimport { ProjectList } from './components/project-list';\n\nnamespace App {\n  new ProjectInput();\n  new ProjectList('active');\n  new ProjectList('finished');\n}\n","import { Component } from './base-component';\nimport { autoBind } from '../decorator/autobind';\nimport { projectState } from '../state/project-state';\nimport { Project, ProjectStatus } from '../models/project';\nimport { DragTarget } from '../models/drag-drop';\nimport { ProjectItem } from './project-item';\n\nexport class ProjectList\n  extends Component<HTMLDivElement, HTMLElement>\n  implements DragTarget\n{\n  assignedProjects: Project[];\n\n  constructor(private type: 'active' | 'finished') {\n    super('project-list', 'app', false, `${type}-projects`);\n    this.assignedProjects = [];\n\n    this.configure();\n    this.renderContent();\n  }\n\n  @autoBind\n  dragOverHandler(event: DragEvent): void {\n    if (event.dataTransfer && event.dataTransfer.types[0] === 'text/plain') {\n      event.preventDefault();\n      const listEl = this.element.querySelector('ul');\n      listEl?.classList.add('droppable');\n    }\n  }\n\n  @autoBind\n  dropHandler(event: DragEvent): void {\n    const prjId = event.dataTransfer!.getData('text/plain');\n    projectState.moveProject(\n      prjId,\n      this.type === 'active' ? ProjectStatus.Active : ProjectStatus.Finished\n    );\n  }\n\n  @autoBind\n  dragLeaveHandler(event: DragEvent): void {\n    const listEl = this.element.querySelector('ul')!;\n    listEl.classList.remove('droppable');\n  }\n\n  configure() {\n    this.element.addEventListener('dragover', this.dragOverHandler);\n    this.element.addEventListener('dragleave', this.dragLeaveHandler);\n    this.element.addEventListener('drop', this.dropHandler);\n\n    projectState.addListener((projects: Project[]) => {\n      const relevantProjects = projects.filter((prj) => {\n        if (this.type === 'active') return prj.status === ProjectStatus.Active;\n        return prj.status === ProjectStatus.Finished;\n      });\n\n      this.assignedProjects = relevantProjects;\n      this.renderProjects();\n    });\n  }\n\n  renderContent() {\n    const listId = `${this.type}-projects-list`;\n    this.element.querySelector('ul')!.id = listId;\n    this.element.querySelector('h2')!.textContent = this.type.toUpperCase() + ' PROJECTS';\n  }\n\n  private renderProjects() {\n    const listEl = document.getElementById(\n      `${this.type}-projects-list`\n    )! as HTMLUListElement;\n\n    listEl.innerHTML = ''; // Clear and rerender\n\n    for (const prjItem of this.assignedProjects) {\n      // this.element refers to the `<section class=\"projects\">`\n      new ProjectItem(this.element.querySelector('ul')!.id, prjItem);\n    }\n  }\n}\n"],"names":["Component","constructor","templateId","hostElementId","insertAtStart","newElementId","this","templateElement","document","getElementById","hostElement","importedNode","importNode","content","element","firstElementChild","id","attach","insertAdjacentElement","autoBind","target","methodName","descriptor","originalMethod","value","configurable","get","bind","validate","validateInput","isValid","required","toString","trim","length","minLength","maxLength","min","max","ProjectStatus","Project","title","description","people","status","State","listeners","addListener","listenerFn","push","ProjectState","super","projects","static","instance","addProject","numOfPeople","newProject","Math","random","Active","updateListeners","moveProject","projectId","newStatus","project","find","prj","slice","projectState","getInstance","ProjectInput","titleInputElement","querySelector","descriptionInputElement","peopleInputElement","configure","addEventListener","submitHandler","renderContent","gatherUserInput","enteredTitle","enteredDescription","enteredPeople","descriptionValidate","peopleValidate","alert","clearInputs","e","preventDefault","userInput","Array","isArray","desc","ProjectItem","hostId","dragStartHandler","event","dataTransfer","setData","effectAllowed","dragEndHandler","console","log","textContent","App","ProjectList","type","assignedProjects","dragOverHandler","types","listEl","classList","add","dropHandler","prjId","getData","Finished","dragLeaveHandler","remove","relevantProjects","filter","renderProjects","listId","toUpperCase","innerHTML","prjItem"],"sourceRoot":""}